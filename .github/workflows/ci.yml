name: CI jobs

on:
  push:

jobs:
  frontend:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 15.11.0
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-mycache-v1-${{ hashFiles('**/lockfiles') }}
      - name: Build with npm run
        run: |
          (cd frontend; npm install && npm run build)
      - name: Deploy
        run: |
          mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
          chmod 600 ~/.ssh/id_rsa
          BUILDDIR=./build;
          WORKDIR=./frontend;
          IMAGE=nkonev/chat-frontend:latest;
          cd $WORKDIR && mkdir -p $BUILDDIR && cp ./Dockerfile $BUILDDIR && cp -r ../frontend-nginx/* $BUILDDIR && cp ../docker/nginx/frontend.conf $BUILDDIR &&
          docker build -t $IMAGE $BUILDDIR &&
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}" &&
          echo "Will push docker image" &&
          docker push $IMAGE &&
          echo "Will deploy frontend" &&
          ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q ${{ secrets.ConnectLine }} ${{ secrets.FrontendUpdateCommand }}

  video:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build & test video
        run: (cd video; make check-env download generate test package)
      - name: Deploy video
        run: |
          mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
          chmod 600 ~/.ssh/id_rsa
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}"
          (cd video; make push-docker && echo "Will deploy video" && ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q ${{ secrets.ConnectLine }} ${{ secrets.VideoUpdateCommand }} )

