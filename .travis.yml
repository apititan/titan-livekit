dist: bionic
before_script:
  - "docker version"
  - "curl https://raw.githubusercontent.com/vishnubob/wait-for-it/8ed92e8cab83cfed76ff012ed4a36cef74b28096/wait-for-it.sh > ${TRAVIS_HOME}/gopath/bin/wait-for-it.sh && chmod +x ${TRAVIS_HOME}/gopath/bin/wait-for-it.sh"
matrix:
  include:
    - language: java
      jdk:
        - "openjdk11"
      cache:
        directories:
          - "/home/travis/.m2"
      before_install:
        - "java -version"
        - sudo apt update && sudo apt install -y chromium-browser
      install:
        - "/bin/true"
      script:
        - "docker-compose up -d"
        - "wait-for-it.sh -t 30 127.0.0.1:35432 -- echo 'postgres is up'"
        - "wait-for-it.sh -t 30 127.0.0.1:36379 -- echo 'redis is up'"
        - "rm ~/.m2/settings.xml"
        - (cd aaa; ./mvnw clean package -Dcustom.selenium.headless=true)
        - BUILDDIR=./build;
          WORKDIR=./aaa;
          IMAGE=nkonev/aaa:latest;
          if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_TEST_RESULT" == "0" && "$TRAVIS_EVENT_TYPE" != "cron" ]]; then (
            cd $WORKDIR && mkdir -p $BUILDDIR && cp ./Dockerfile $BUILDDIR && cp target/*-exec.jar $BUILDDIR &&
            docker build -t $IMAGE $BUILDDIR
            && docker login -u="$DOCKER_LOGIN" -p="$DOCKER_PASSWORD" &&
            docker push $IMAGE &&
            ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q $CONNECT_LINE $UPDATE_COMMAND;
          ) else (
            echo "Won't push docker image and deploy";
          ) fi

    - language: javascript
      node_js:
        - "12.16.3"
      cache:
        directories:
          - "/home/travis/build/nkonev/videochat/frontend/node_modules"
      before_install:
        - "node --version"
      install:
        - "/bin/true"
      script:
        - "pwd"
        - (cd frontend; npm install && npm run build)
        - BUILDDIR=./build;
          WORKDIR=./frontend;
          IMAGE=nkonev/frontend:latest;
          if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_TEST_RESULT" == "0" && "$TRAVIS_EVENT_TYPE" != "cron" ]]; then (
            cd $WORKDIR && mkdir -p $BUILDDIR && cp ./Dockerfile $BUILDDIR && cp -r ../frontend-nginx/* $BUILDDIR && cp ../docker/nginx/frontend.conf $BUILDDIR &&
            docker build -t $IMAGE $BUILDDIR
                        && docker login -u="$DOCKER_LOGIN" -p="$DOCKER_PASSWORD" &&
                        docker push $IMAGE &&
                        ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q $CONNECT_LINE $UPDATE_COMMAND;
          ) else (
            echo "Won't push docker image and deploy";
          ) fi

    - language: go
      sudo: required
      go:
        - "1.14.3"
      cache:
        directories:
          - "$GOPATH/pkg"
      before_install:
        - "go version"
      install:
        - "/bin/true"
      script:
        - pwd
        - go env
        - echo moving repository to flat directory struct
        - mv /home/travis/gopath/src/github.com/nkonev/videochat /home/travis/gopath
        - cd /home/travis/gopath/videochat
        - pwd
        - "(GO111MODULE=on go get github.com/GeertJohan/go.rice/rice@v1.0.0)"
        - "docker-compose up -d"
        - "wait-for-it.sh -t 30 127.0.0.1:35432 -- echo 'postgres is up'"
        - "wait-for-it.sh -t 30 127.0.0.1:36379 -- echo 'redis is up'"
        - "wait-for-it.sh -t 30 127.0.0.1:9000 -- echo 'minio is up'"
        - sudo -- bash -c "echo '127.0.0.1   api.site.local' >> /etc/hosts"
        - "rm -rf ./chat/proto"
        - "mkdir ./chat/proto || true"
        - "docker run -it --rm -v $PWD:/ws -w /ws znly/protoc:0.4.0 --go_out=plugins=grpc:chat/proto -I./protobuf ./protobuf/*.proto"
        # https://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671
        - (cd chat; go test ./... -count=1 -test.v -test.timeout=20s -p 1)
        - (cd chat; rice embed-go && echo 'completed generating embed' && CGO_ENABLED=0 go build -trimpath -ldflags '-w -extldflags "-static"')
        - (cd storage; go test ./... -count=1 -test.v -test.timeout=20s -p 1)
        - (cd storage; rice embed-go && echo 'completed generating embed' && CGO_ENABLED=0 go build -trimpath -ldflags '-w -extldflags "-static"')

        - function buildAndPushGoDockerImage {
            if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_TEST_RESULT" == "0" && "$TRAVIS_EVENT_TYPE" != "cron" ]]; then (
              cd $WORKDIR && mkdir -p $BUILDDIR && mv $EXECUTABLE $BUILDDIR && cp ./Dockerfile $BUILDDIR &&
              docker build --build-arg BINARY=$EXECUTABLE -t $IMAGE $BUILDDIR
              && docker login -u="$DOCKER_LOGIN" -p="$DOCKER_PASSWORD" &&
              docker push $IMAGE &&
              ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q $CONNECT_LINE $UPDATE_COMMAND || exit 1
            ) else (
              echo "Won't push docker image and deploy";
            ) fi
          }

        - BUILDDIR=./build;
          WORKDIR=./chat;
          EXECUTABLE=chat;
          IMAGE=nkonev/chat:latest;
          buildAndPushGoDockerImage;

        - BUILDDIR=./build;
          WORKDIR=./storage;
          EXECUTABLE=storage;
          IMAGE=nkonev/storage:latest;
          buildAndPushGoDockerImage;